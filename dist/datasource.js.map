{"version":3,"sources":["../src/datasource.js"],"names":["_","jsonpath","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","statementIds","map","i","id","datasourceRequest","method","headers","then","data","entries","r","resources","p","indexOf","ID","v","jsonPathX","jsonPathY","lastOutput","ResultValue","Date","x","getTime","Time","zip","e","console","log","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","target","interpolated","mapToTextValue","text","value","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport jsonpath from './external/jsonpath';\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    var statementIds = query.targets.map(i => (i.id));\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/statement//',\n      //data: interpolated,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => {\n      var data = _.entries(r.data.resources)\n        .map(p => (p[1]))\n        .filter(p => (statementIds.indexOf(p.ID) !== -1))\n        .map(p => {\n          var t, v, jsonPathX, jsonPathY;\n\n          for (let t of query.targets) {\n            if (t.id === p.ID) {\n              jsonPathX = t.jsonPathX;\n              jsonPathY = t.jsonPathY;\n              break;\n            }\n          }\n\n          try {\n            if (jsonPathX) {\n              t = jsonpath.query(p.lastOutput.ResultValue, jsonPathX).map(x => ((new Date(x)).getTime()));\n            }\n            else {\n              t = [(new Date(p.lastOutput.Time)).getTime()];\n            }\n\n            if (jsonPathY) {\n              v = jsonpath.query(p.lastOutput.ResultValue, jsonPathY);\n            }\n            else {\n              v = [p.lastOutput.ResultValue];\n            }\n\n            return {\n              'target': p.name, // The field being queried for\n              'datapoints': _.zip(v, t)\n            }\n          }\n          catch (e) {\n            // console.log('error', e)\n            return false;\n          }\n\n\n        });\n\n      console.log(data);\n      r.data = data;\n      return r;\n\n    });\n\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    var target = typeof (options) === \"string\" ? options : options.name;\n    var interpolated = {\n      target: this.templateSrv.replace(target, null, 'regex')\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/statement//',\n      //data: interpolated,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.entries(result.data.resources)\n      .map(p => ({ text: p[1].name, value: p[0] }))\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        id: this.templateSrv.replace(target.id),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n\n        jsonPathX: target.jsonPathX,\n        jsonPathY: target.jsonPathY\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}